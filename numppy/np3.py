import numpy as np

print(np.array([1] * 10)) # [1 1 1 1 1 1 1 1 1 1] - работает долго

print(np.array([x for x in range(10)])) # генерация - [0 1 2 3 4 5 6 7 8 9] - работает долго

# более быстрые способы создания массива

# empty - случайное заполнение матриц
print(np.empty(10)) # [0.0e+000 4.9e-324 9.9e-324 1.5e-323 2.0e-323 2.5e-323 3.0e-323 3.5e-323 4.0e-323 4.4e-323] рандомные 10 чисел
print(np.empty(10, 'int16')) # [0 1 1 1 1 1 1 1 1 1] в случае int8 [0 0 0 0 0 0 0 0 0 0] в случае int16
print(np.empty((4, 3, 2), 'float32')) # двумерный массив 3 на 2

# eye - единичная матрица
print(np.eye(4)) # единичная матрица - по главной диагонали стоят 1
print(np.eye(4, 2)) # матрица 4 на 2, где по главной диагонали идут 1, остальные нули

# identity - тоже единичная матрица
print(np.identity(5)) # единичная матрица 5х5

# zeros - нулевая, ones - заполненная единицами
print(np.zeros((2, 3))) # массив 2х3 из нулей
print(np.ones([3, 4], 'int8')) # матрица 3х4 из единиц и типом int8

# full - заполненная определенными цифрами
print(np.full([2, 3], -8)) # матрица 2х3 заполненная -8


# matrix - матрица из строк, массивов, массива кортежей
print(np.matrix("1, 2, 3, 4")) # матрица из строки - [[1 2 3 4]] размерностью 1x4

print(np.matrix("1,2;3,4")) # двумерная матрица из строки - [[1 2] [3 4]] 2х2
print(np.matrix("1 2;3 4")) # можно также просто пробелом разделять а не запятыми

print(np.matrix([1, 2, 3, 4])) # матрица из списка
print(np.matrix([(1, 2, 3, 4), (5, 6, 7, 8)])) # матрица 2х4 из списка кортежей


# diag - заполнение элементов по главной диагонали(не распр. на многомерные матрицы)
# diagflat - заполняет ВСЕ ЭЛЕМЕНТЫ ДАЖЕ НЕСКОЛЬКОМЕРНОЙ МАТРИЦЫ по главной диагонали
print(np.diag([1, 2, 3, 4])) # матрица 4х4 с диагональю 1 2 3 4

print(); print()

print(np.diag([(1, 2, 3), (4, 5, 6), (7, 8, 9)])) # в таком случае функция выделит элементы матрицы,
                                                  # которые стоят ПО ГЛАВНОЙ ДИАГОНАЛИ - 1 5 9

print(np.diagflat([(1, 2, 3), (4, 5, 6), (7, 8, 9)])) # создаст матрицу 9х9 с 123456789 по главной диагонали


# tril - треугольная матрица triu - обратная треугольная матрица
print(np.tri(4)) # создает по главной диагонали треугольную матрицу 4x4
print(np.tri(2, 4)) # треугольная матрица 2х4

a = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) # [[1 2 3] [4 5 6] [7 8 9]]
print(np.tril(a)) # приводит матрицу a к треугольному виду(все элементы, что не попадают в треугольник - обнуляются)

print(np.triu(a)) # тоже самое, только к обратная треугольная матрицу
print(np.tril([1, 2, 3])) # делает матрицу [[1, 2, 3] [1, 2, 3] [1, 2, 3]] и срезает элементы вне треугольника
print(np.tril([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]])) # многомерная треугольная матрциа

print()

# vander - матрица Вандермонда(Vandermonde)
print(np.vander([1, 2, 3]))



### ФУНКЦИИ ДЛЯ РАБОТЫ С ЧИСЛОВЫМИ ДИАПАЗОНАМИ
